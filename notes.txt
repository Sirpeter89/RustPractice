-main function runs first
-rust uses macros example: println!, ! denotes macro, different from functions
-if calling function then exampleFunction()
-rust styling uses 4 spaces instead of tab
-similar to gcc C++ ahead-of-time compiled, compile .rs files with rustc <filename>.rs then run with ./<filename>
-executables can then be sent to anyone and ran even without rust

function syntax:
fn main() {
}

cargo builds code and dependencies:
cargo new <projectName> similar to mkdir
	creates new rust project that uses Cargo, organizes files for you
	source code should be in src
	configs and readme in root

can convert non-cargo projects to cargo by moving rust files to src dir
	and creating a Cargo.toml file for package/dep management

build cargo projects with cargo build cmd
	outputs executable to target/debug/<project_name>
	additionally creates lock file in root, manages dependency versions

cargo run, builds and runs executable

cargo check, checks code to see if it compiles, does not run executable
	this is faster than building, use this to check

cargo build --release, once you are ready for production, run this to create a production executable
	optimizes your code, takes longer to compile, use this to benchmark code

can checkout to other projects and build them:
	git clone <gitproject>
	cd to that dir
	cargo build

cmds learned so far:
rustup update - updates rust
rustc --version - checks version
rustc - for building simple apps that dont require cargo
cargo new <projectName> - created new cargo project
cargo build - builds project, creates Cargo.lock file
cargo run - builds and runs project
cargo check - checks for compilation errors, faster than build
cargo build --release, builds production executable

variables in rust by default are immutable, can change that by prepending mut.
let apples = 5 // immutable
let mut apples = 5 //mutable

let mut name = String::new() //creates new variable name that is a string.
	::new is an associated function of a type.

check guessing_game for more notes.

&variable means reference to variable.

references and variables are both immutable by default

let x = 5;
let y = 10;

println!("x = {} and y = {}", x, y);
example of way to print 2 values with curlys to reference values

for dependencies such as modules, need to import them into Cargo.toml. Such as rand.
	for any versions after 0.9.0 inclusive, need to explicitly state in toml file

cargo doc --open command builds all documents from dependencies and opens docs in browser.

by default integers are i32 type in rust (32 bit integers) can change this

const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;
	example of Rust constant
	const convention all caps
	review: const can't be values computed at runtime; however, above is okay because that happens at compile time

fn main() {
    let x = 5;

    let x = x + 1;

    {
        let x = x * 2;
        println!("The value of x in the inner scope is: {}", x);
    }

    println!("The value of x is: {}", x);
}
example of shadowing in Rust, inner scope x = 12, outer scope x = 6; this way keeps immutability

    let mut spaces = "   ";
    spaces = spaces.len();
example of invalid code, cannot mutate a variables type

RUST IS A STATICALLY TYPED LANGUAGE
	strong typing on all variables needed
example: let guess: u32 = "42".parse().expect("Not a number!");
u32 is needed or gives compiling error

Scalar Types: integers, floats, bools, and chars

	integer type variants: i8, u8 ... i128, u128 ... isize usize
	u = unsigned, i = signed

	integer literals: 1_000 same as 1000 for readability
	integer overflow u8 cannot be assigned 256, error

	floats: f32, f64 default is f64
	let x = 2.0 //f64
	let y: f32 = 3.0 //f32

	integer division rounds down to nearest integer

	booleans: bool

	chars: use 1 quote 'a' let c = 'z'
	strings: use 2 quotes

	Compound Types
	Tuples and arrays
	
	Tuples: let tup: (i32, f64, u8) = (500, 6.4, 1);  //optional type annotations
		tuples are fixed length, cannot grow or shrink after declaration

    let tup = (500, 6.4, 1);

    let (x, y, z) = tup;

    println!("The value of y is: {}", y);

	need to destructure tuples to access values or go by index 

    let five_hundred = tup.0;

    let six_point_four = tup.1;

    let one = tup.2;

	expressions implicity return unit value () if no return value

	ARRAYS

	Arrays are fixed in length and cannot have mixed types

	let a: [i32; 5] = [1, 2, 3, 4, 5]; or let a = [1, 2, 3, 4, 5];

	let a = [3; 5]; // creates 5 elements all 3s

	same element access method a[0]

Functions

-functions are hoisted, can be defined anywhere and called before
-functions must declare type of parameters
-Statements are instructions, expressions return values, Rust is expression based.
fn main() {
    let y = {
        let x = 3;
        x + 1
    };

    println!("The value of y is: {}", y);
}

{
    let x = 3;
    x + 1 //does NOT have semicolon in the end, this is an expression, semicolons turn it into statement no return value
} //would be the expression, even something like 5+6 is an expression

fn five() -> i32 {
    5
}//Another example, return type declared with ->, expression evaluated at the end

fn main() {
    let x = five();

    println!("The value of x is: {}", x);
}

can also use 'return' statement similar to javascript to explicity state return value.
if functions have a return type, but ends with statement will get mismtached values error

Conditionals

fn main() {
    let number = 3;

    if number < 5 {
        println!("condition was true");
    } else {
        println!("condition was false");
    }
}

Conditions must be a bool, different from JS you cannot do this 
fn main() {
    let number = 3;

    if number {
        println!("number was three");
    }
} //will result in an error, doesn't check if number exists, just errors, must be explicit in Rust

fn main() {
    let number = 3;

    if number != 0 {
        println!("number was something other than zero");
    }
} //would be valid if checking for non-zero

else if syntax
fn main() {
    let number = 6;

    if number % 4 == 0 {
        println!("number is divisible by 4");
    } else if number % 3 == 0 {
        println!("number is divisible by 3");
    } else if number % 2 == 0 {
        println!("number is divisible by 2");
    } else {
        println!("number is not divisible by 4, 3, or 2");
    }
}

if's are an expression can use it on right hand side for assignment
fn main() {
    let condition = true;
    let number = if condition { 5 } else { 6 }; //remember that numbers by themselves are also expressions

    println!("The value of number is: {}", number);
} //return types must be the same in if conditions or errors


LOOPS
Rust has 3 kinds: loop, while, for

Loops can have labels:
fn main() {
    let mut count = 0;
    'counting_up: loop {
        println!("count = {}", count);
        let mut remaining = 10;

        loop {
            println!("remaining = {}", remaining);
            if remaining == 9 {
                break;
            }
            if count == 2 {
                break 'counting_up; //breaks outer labeled loop
            }
            remaining -= 1;
        }

        count += 1;
    }
    println!("End count = {}", count);
}

Can return values from loops like this:
fn main() {
    let mut counter = 0;

    let result = loop {
        counter += 1;

        if counter == 10 {
            break counter * 2; //notice semicolon here, different from expression
        }
    };

    println!("The result is {}", result);
}

while loops: //looping with conditions
fn main() {
    let mut number = 3;

    while number != 0 {
        println!("{}!", number);

        number -= 1;
    }

    println!("LIFTOFF!!!");
}

looping through array example:
fn main() {
    let a = [10, 20, 30, 40, 50];
    let mut index = 0;

    while index < 5 {
        println!("the value is: {}", a[index]);

        index += 1;
    }
}

fn main() {
    let a = [10, 20, 30, 40, 50];

    for element in a {
        println!("the value is: {}", element);
    }
} //using for loop to iterate through array

fn main() {
    for number in (1..4).rev() { //uses rev macro to reverse range
        println!("{}!", number);
    }
    println!("LIFTOFF!!!");
}

OWNERSHIP
Memory is either on stack or heap
Stack is for fixed size memory, heap is for unknown size or changing memory
We allocated memory on the heap, since we don't know how much we use, it returns a pointer
Pushing to the stack is faster than allocated memory on the heap
Same with accessing too since we have to follow a pointer
-When we call a function, passed values even pointers are pushed to the Stack

ownership rules:
Each value in Rust has a variable thatâ€™s called its owner.
There can only be one owner at a time.
When the owner goes out of scope, the value will be dropped.

-Values are valid when they are in scope, invalid when not

String not string literals are stored on heap 
Strings can be mutated string literals cannot

let s = String::from("hello");
s.push_str(", world!"); // push_str() appends a literal to a String
println!("{}", s); // This will print `hello, world!`

When heap values are out of scope, Rust calls a drop function to deallocate its memory

A String is made up of three parts, shown on the left: a pointer to the memory that holds the contents of the string, a length, and a capacity. This group of data is stored on the stack. On the right is the memory on the heap that holds the contents.

The length is how much memory, in bytes, the contents of the String is currently using. The capacity is the total amount of memory, in bytes, that the String has received from the allocator.

When we assign s1 to s2, the String data is copied, meaning we copy the pointer, the length, and the capacity that are on the stack. We do not copy the data on the heap that the pointer refers to.

 let s1 = String::from("hello");
 let s2 = s1; //for heap variables, s1 is "moved" into s2, for memory deallocation purposes

 println!("{}, world!", s1); //This actually errors out

when a variable is "moved" s1 becomes invalid and can no longer be used, doesn't get copied

 let s1 = String::from("hello");
 let s2 = s1.clone(); //to make a copy we'd have to use the clone method instead, this copies the heap data, tells us is an expensive operation

 println!("s1 = {}, s2 = {}", s1, s2);
